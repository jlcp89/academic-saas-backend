name: Deploy Backend to AWS

on:
  push:
    branches: [ main, dev, feature/good-cicd ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-backend
  PYTHON_VERSION: '3.11'
  AWS_ACCOUNT_ID: '860639121390'

jobs:
  # ========================================
  # TESTING & BUILD JOB
  # ========================================
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_academic_saas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_academic_saas
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
        ALLOWED_HOSTS: localhost,127.0.0.1
        CORS_ALLOWED_ORIGINS: http://localhost:3000
        AWS_STORAGE_BUCKET_NAME: test-bucket
      run: |
        python manage.py migrate

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_academic_saas
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
        ALLOWED_HOSTS: localhost,127.0.0.1
        CORS_ALLOWED_ORIGINS: http://localhost:3000
        AWS_STORAGE_BUCKET_NAME: test-bucket
      run: |
        python manage.py test

    - name: Check code style with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output for next jobs
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ========================================
  # DEVELOPMENT DEPLOYMENT JOB
  # ========================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feature/good-cicd'
    environment: development

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Development Instance
      env:
        IMAGE_URI: ${{ needs.test-and-build.outputs.image-uri }}
        DEV_INSTANCE_IP: ${{ secrets.DEV_INSTANCE_IP }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      run: |
        if [ -z "$DEV_INSTANCE_IP" ]; then
          echo "❌ DEV_INSTANCE_IP secret not configured"
          exit 1
        fi
        
        echo "🚀 Deploying to development instance: $DEV_INSTANCE_IP"
        
        # Setup SSH key
        echo "$EC2_SSH_KEY" > /tmp/ec2-key.pem
        chmod 600 /tmp/ec2-key.pem
        
        # Create deployment script
        cat > /tmp/deploy-backend.sh << 'DEPLOY_SCRIPT'
        #!/bin/bash
        set -e
        
        IMAGE_URI="$1"
        SECRET_KEY="$2"
        DATABASE_URL="$3"
        REDIS_URL="$4"
        ALLOWED_HOSTS="$5"
        CORS_ALLOWED_ORIGINS="$6"
        AWS_ACCESS_KEY_ID="$7"
        AWS_SECRET_ACCESS_KEY="$8"
        AWS_S3_REGION_NAME="$9"
        AWS_STORAGE_BUCKET_NAME="${10}"
        
        echo "🔄 Starting backend deployment..."
        
        # Login to ECR
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${IMAGE_URI%%/*}
        
        # Stop and remove existing container
        echo "⏹️  Stopping existing backend container..."
        docker stop academic-saas-backend || true
        docker rm academic-saas-backend || true
        
        # Pull new image
        echo "📥 Pulling new image: $IMAGE_URI"
        docker pull "$IMAGE_URI"
        
        # Create environment file
        sudo mkdir -p /opt/academic-saas
        cat > /tmp/backend.env << ENV_FILE
        SECRET_KEY=$SECRET_KEY
        DEBUG=True
        DATABASE_URL=$DATABASE_URL
        REDIS_URL=$REDIS_URL
        ALLOWED_HOSTS=$ALLOWED_HOSTS
        CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS
        AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        AWS_S3_REGION_NAME=$AWS_S3_REGION_NAME
        AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME
        ENV_FILE
        
        sudo mv /tmp/backend.env /opt/academic-saas/.env.backend
        sudo chown root:root /opt/academic-saas/.env.backend
        sudo chmod 600 /opt/academic-saas/.env.backend
        
        # Start new container
        echo "🚀 Starting new backend container..."
        docker run -d \
          --name academic-saas-backend \
          --restart unless-stopped \
          --network host \
          --env-file /opt/academic-saas/.env.backend \
          "$IMAGE_URI"
        
        # Wait for container to be healthy
        echo "⏳ Waiting for container to be healthy..."
        sleep 30
        
        if docker ps | grep -q academic-saas-backend; then
          echo "✅ Backend container is running"
          
          # Run migrations
          echo "🔄 Running database migrations..."
          docker exec academic-saas-backend python manage.py migrate
          
          # Collect static files
          echo "📦 Collecting static files..."
          docker exec academic-saas-backend python manage.py collectstatic --noinput
          
          # Health check
          echo "🔍 Performing health check..."
          if curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
            echo "✅ Backend deployment completed successfully!"
          else
            echo "❌ Health check failed"
            docker logs academic-saas-backend --tail 20
            exit 1
          fi
        else
          echo "❌ Backend container failed to start"
          docker logs academic-saas-backend --tail 20
          exit 1
        fi
        DEPLOY_SCRIPT
        
        # Make script executable
        chmod +x /tmp/deploy-backend.sh
        
        # Copy and execute on remote server
        scp -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no /tmp/deploy-backend.sh ec2-user@$DEV_INSTANCE_IP:/tmp/
        
        ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$DEV_INSTANCE_IP \
          "/tmp/deploy-backend.sh '$IMAGE_URI' '$DJANGO_SECRET_KEY' '$DATABASE_URL' '$REDIS_URL' '$ALLOWED_HOSTS' '$CORS_ALLOWED_ORIGINS' '${{ secrets.AWS_ACCESS_KEY_ID }}' '${{ secrets.AWS_SECRET_ACCESS_KEY }}' '${{ env.AWS_REGION }}' '$AWS_STORAGE_BUCKET_NAME'"
        
        # Clean up
        rm -f /tmp/ec2-key.pem /tmp/deploy-backend.sh

    - name: Verify deployment
      run: |
        DEV_INSTANCE_IP="${{ secrets.DEV_INSTANCE_IP }}"
        BACKEND_URL="http://$DEV_INSTANCE_IP:8000"
        
        echo "🔍 Testing backend at $BACKEND_URL"
        sleep 30
        
        if curl -f $BACKEND_URL/admin/login/ > /dev/null 2>&1; then
          echo "✅ Development deployment verification completed"
        else
          echo "❌ Development deployment verification failed"
          exit 1
        fi

  # ========================================
  # NOTIFICATION JOB
  # ========================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-dev]
    if: always()
    
    steps:
    - name: Notify deployment results
      run: |
        echo "📊 Deployment Summary:"
        echo "===================="
        echo "Build Status: ${{ needs.test-and-build.result }}"
        echo "Dev Deployment: ${{ needs.deploy-dev.result }}"
        
        if [ "${{ needs.test-and-build.result }}" == "success" ]; then
          echo "✅ Build and tests passed"
        else
          echo "❌ Build or tests failed"
        fi
        
        if [ "${{ needs.deploy-dev.result }}" == "success" ]; then
          echo "✅ Development deployment successful"
          echo "🌐 Dev Access: http://${{ secrets.DEV_INSTANCE_IP }}:8000"
        elif [ "${{ needs.deploy-dev.result }}" == "skipped" ]; then
          echo "⏭️ Development deployment skipped"
        else
          echo "❌ Development deployment failed"
        fi