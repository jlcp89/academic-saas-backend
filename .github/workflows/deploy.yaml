name: Deploy Django Backend to AWS

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - dev
      - main

jobs:
  # Deploy to dev environment
  deploy_dev:
    name: Deploy DEV Environment
    if: github.event.pull_request.base.ref == 'dev'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Deploy Django Backend to EC2 (dev)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export ENVIRONMENT=dev
            export DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}
            export REDIS_URL=${{ secrets.REDIS_URL_DEV }}
            export SECRET_KEY=${{ secrets.SECRET_KEY_DEV }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME_DEV }}
            
            cd /home/ec2-user
            echo "Removing previous deployment..."
            sudo rm -rf academic-saas-backend
            
            echo "Cloning backend repository (PR branch: ${{ github.event.pull_request.head.ref }})..."
            git clone --depth 1 --branch ${{ github.event.pull_request.head.ref }} --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-backend.git academic-saas-backend
            
            cd academic-saas-backend
            
            echo "Installing Poetry if not present..."
            if ! command -v poetry &> /dev/null; then
              curl -sSL https://install.python-poetry.org | python3 -
              export PATH="$HOME/.local/bin:$PATH"
            fi
            
            echo "Installing dependencies..."
            poetry install --only=main --no-dev
            
            echo "Running migrations..."
            poetry run python manage.py migrate
            
            echo "Collecting static files..."
            poetry run python manage.py collectstatic --noinput
            
            echo "Stopping existing Django process..."
            pkill -f "python manage.py runserver" || true
            
            echo "Starting Django application..."
            nohup poetry run python manage.py runserver 0.0.0.0:8000 > /dev/null 2>&1 &
            
            echo "Waiting for application to start..."
            sleep 10
            
            echo "Verifying deployment..."
            if curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
              echo "✅ Backend deployed successfully in DEV!"
            else
              echo "❌ Error: Application not responding"
              exit 1
            fi
            
            echo "DEV backend deployment finished."

  # Deploy to production environment
  deploy_prod:
    name: Deploy PROD Environment
    if: |
      github.event.pull_request.base.ref == 'main' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Deploy Django Backend to EC2 (prod)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export ENVIRONMENT=prod
            export DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}
            export REDIS_URL=${{ secrets.REDIS_URL_PROD }}
            export SECRET_KEY=${{ secrets.SECRET_KEY_PROD }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME_PROD }}
            export ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS_PROD }}
            
            cd /home/ec2-user
            echo "Creating backup of current deployment..."
            sudo cp -r academic-saas-backend academic-saas-backend-backup-$(date +%Y%m%d-%H%M%S) || true
            
            echo "Removing previous deployment..."
            sudo rm -rf academic-saas-backend
            
            echo "Cloning backend repository (main branch)..."
            git clone --depth 1 --branch main --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-backend.git academic-saas-backend
            
            cd academic-saas-backend
            
            echo "Installing Poetry if not present..."
            if ! command -v poetry &> /dev/null; then
              curl -sSL https://install.python-poetry.org | python3 -
              export PATH="$HOME/.local/bin:$PATH"
            fi
            
            echo "Installing dependencies..."
            poetry install --only=main --no-dev
            
            echo "Running migrations..."
            poetry run python manage.py migrate
            
            echo "Collecting static files..."
            poetry run python manage.py collectstatic --noinput
            
            echo "Stopping existing Django process..."
            pkill -f "python manage.py runserver" || true
            
            echo "Starting Django application..."
            nohup poetry run python manage.py runserver 0.0.0.0:8000 > /dev/null 2>&1 &
            
            echo "Waiting for application to start..."
            sleep 15
            
            echo "Health check..."
            if curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
              echo "✅ Backend deployed successfully in PRODUCTION!"
            else
              echo "❌ Health check failed"
              exit 1
            fi
            
            echo "PROD backend deployment finished."

