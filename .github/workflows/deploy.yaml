name: Deploy Django Backend to AWS

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - dev
      - main

jobs:
  # Deploy to dev environment
  deploy_dev:
    name: Deploy DEV Environment
    if: github.event.pull_request.base.ref == 'dev'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Deploy Django Backend to EC2 (dev)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export ENVIRONMENT=dev
            export DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}
            export REDIS_HOST=localhost
            export REDIS_PORT=6379
            export CELERY_BROKER_URL=redis://localhost:6379/0
            export CELERY_RESULT_BACKEND=redis://localhost:6379/0
            export SECRET_KEY=${{ secrets.SECRET_KEY_DEV }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME_DEV }}
            
            cd /home/ec2-user
            echo "Eliminando despliegue anterior..."
            sudo rm -rf academic-saas-backend
            
            echo "Clonando repositorio backend (PR branch: ${{ github.event.pull_request.head.ref }})..."
            git clone --depth 1 --branch ${{ github.event.pull_request.head.ref }} --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-backend.git academic-saas-backend
            
            cd academic-saas-backend
            
            echo "Creando entorno virtual..."
            python3 -m venv venv
            source venv/bin/activate
            
            echo "Actualizando pip..."
            venv/bin/pip install --upgrade pip
            
            echo "Instalando dependencias..."
            venv/bin/pip install -r requirements.txt
            
            echo "Verificando dependencias críticas..."
            venv/bin/pip show django psycopg2-binary gunicorn || (echo "❌ Faltan dependencias críticas" && exit 1)
            
            echo "Ejecutando migraciones..."
            venv/bin/python manage.py migrate
            
            echo "Recopilando archivos estáticos..."
            venv/bin/python manage.py collectstatic --noinput
            
            echo "Deteniendo procesos Django previos..."
            pkill -f "manage.py runserver" || true
            pkill -f "gunicorn" || true
            sleep 5
            
            echo "Iniciando aplicación Django con Gunicorn..."
            venv/bin/gunicorn core.wsgi:application --bind 0.0.0.0:8000 --daemon --pid /tmp/gunicorn.pid
            
            echo "Esperando a que la aplicación inicie..."
            sleep 15
            
            echo "Verificando despliegue..."
            if curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
              echo "✅ Backend desplegado correctamente en DEV!"
            else
              echo "❌ Error: La aplicación no responde"
              ps aux | grep gunicorn || true
              netstat -tlnp | grep :8000 || true
              exit 1
            fi
            
            echo "Despliegue DEV finalizado."

  # Deploy to production environment
  deploy_prod:
    name: Deploy PROD Environment
    if: |
      github.event.pull_request.base.ref == 'main' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Deploy Django Backend to EC2 (prod)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export ENVIRONMENT=prod
            export DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}
            export REDIS_HOST=localhost
            export REDIS_PORT=6379
            export CELERY_BROKER_URL=redis://localhost:6379/0
            export CELERY_RESULT_BACKEND=redis://localhost:6379/0
            export SECRET_KEY=${{ secrets.SECRET_KEY_PROD }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME_PROD }}
            export ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS_PROD }}
            
            cd /home/ec2-user
            echo "Creating backup of current deployment..."
            sudo cp -r academic-saas-backend academic-saas-backend-backup-$(date +%Y%m%d-%H%M%S) || true
            
            echo "Removing previous deployment..."
            sudo rm -rf academic-saas-backend
            
            echo "Cloning backend repository (main branch)..."
            git clone --depth 1 --branch main --single-branch https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/academic-saas-backend.git academic-saas-backend
            
            cd academic-saas-backend
            
            echo "Setting up Python virtual environment..."
            python3 -m venv venv
            source venv/bin/activate
            
            echo "Upgrading pip..."
            pip install --upgrade pip
            
            echo "Installing dependencies with pip..."
            pip install -r requirements.txt
            
            echo "Running migrations..."
            python manage.py migrate
            
            echo "Collecting static files..."
            python manage.py collectstatic --noinput
            
            echo "Stopping existing Django processes..."
            pkill -f "manage.py runserver" || true
            pkill -f "gunicorn" || true
            sleep 5
            
            echo "Starting Django application with Gunicorn..."
            gunicorn core.wsgi:application --bind 0.0.0.0:8000 --daemon --pid /tmp/gunicorn.pid
            
            echo "Waiting for application to start..."
            sleep 15
            
            echo "Health check..."
            if curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
              echo "\u2705 Backend deployed successfully in PRODUCTION!"
            else
              echo "\u274c Health check failed"
              echo "Checking if Gunicorn is running..."
              ps aux | grep gunicorn || true
              echo "Checking if port 8000 is open..."
              netstat -tlnp | grep :8000 || true
              exit 1
            fi
            
            echo "PROD backend deployment finished."

