name: Deploy Backend to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: academic-saas-backend
  ECS_CLUSTER: academic-saas-dev

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EC2 via Auto Scaling Group
      env:
        ASG_NAME: academic-saas-dev-backend-asg
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        # Get instance IPs from ASG
        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
          --output text)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "No running instances found in ASG"
          exit 1
        fi
        
        # Get instance IPs
        for INSTANCE_ID in $INSTANCE_IDS; do
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ "$INSTANCE_IP" != "null" ] && [ "$INSTANCE_IP" != "" ]; then
            echo "Deploying to instance $INSTANCE_ID ($INSTANCE_IP)"
            
            # Setup SSH key
            echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2-key.pem
            chmod 600 /tmp/ec2-key.pem
            
            # Create environment file locally
            {
              echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
              echo "REDIS_URL=${{ secrets.REDIS_URL }}"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}"
              echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
              echo "DEBUG=False"
            } > /tmp/backend.env
            
            # Deploy via SSH  
            ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            scp -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no /tmp/backend.env ubuntu@$INSTANCE_IP:/tmp/backend.env
            
            # Create deployment script
            {
              echo "#!/bin/bash"
              echo "set -e"
              echo "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin \$1"
              echo "docker pull \$2"
              echo "sudo mkdir -p /opt/academic-saas"
              echo "sudo cp /tmp/backend.env /opt/academic-saas/.env"
              echo "sudo chown root:root /opt/academic-saas/.env"
              echo "sudo chmod 600 /opt/academic-saas/.env"
              echo "docker stop academic-saas-backend || true"
              echo "docker rm academic-saas-backend || true"
              echo "docker run -d --name academic-saas-backend --restart unless-stopped -p 8000:8000 --env-file /opt/academic-saas/.env \$2"
              echo "sleep 30"
              echo "curl -f http://localhost:8000/admin/login/ || exit 1"
              echo "echo 'Backend deployment completed successfully'"
              echo "rm -f /tmp/backend.env"
            } > /tmp/deploy.sh
            
            # Execute deployment via SSH (now that instances have public IPs)
            scp -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no /tmp/backend.env ubuntu@$INSTANCE_IP:/tmp/backend.env
            scp -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no /tmp/deploy.sh ubuntu@$INSTANCE_IP:/tmp/deploy.sh
            ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "chmod +x /tmp/deploy.sh && /tmp/deploy.sh $ECR_REGISTRY $IMAGE_URI"
            
            # Clean up key file
            rm -f /tmp/ec2-key.pem
          else
            echo "Instance $INSTANCE_ID has no public IP, skipping"
          fi
        done

    - name: Verify deployment
      run: |
        # Wait for deployment to complete
        sleep 120
        
        # Check health endpoint
        BACKEND_URL="http://academic-saas-dev-backend-alb-1977961495.us-east-1.elb.amazonaws.com"
        curl -f $BACKEND_URL/admin/login/ || exit 1
        
        echo "Deployment verification completed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Backend deployment successful"
        else
          echo "❌ Backend deployment failed"
          exit 1
        fi