name: Deploy Backend to DEV (Push)

on:
  push:
    branches: [ dev ]

env:
  AWS_REGION: us-east-1

jobs:
  deploy-dev:
    name: Deploy to DEV Environment
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Deploy Django Backend to EC2 (dev)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🚀 Iniciando despliegue del backend..."
            
            # Configurar variables de entorno
            export ENVIRONMENT=dev
            export DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}
            export REDIS_URL=${{ secrets.REDIS_URL_DEV }}
            export SECRET_KEY=${{ secrets.SECRET_KEY_DEV }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME_DEV }}
            
            cd /home/ec2-user
            echo "🧹 Limpiando despliegue anterior..."
            sudo rm -rf academic-saas-backend
            
            echo "📥 Clonando repositorio backend..."
            git clone --depth 1 --branch dev https://github.com/jlcp89/academic-saas-backend.git academic-saas-backend
            
            cd academic-saas-backend
            
            echo "🐍 Configurando Python, PostgreSQL y dependencias..."
            
            # Install Python 3.8 if not present
            if ! command -v python3.8 &> /dev/null; then
              echo "Installing Python 3.8..."
              sudo yum update -y
              sudo yum install -y amazon-linux-extras
              sudo amazon-linux-extras enable python3.8
              sudo yum install -y python3.8 python3.8-pip
            fi
            
            # Install and configure PostgreSQL
            echo "Setting up PostgreSQL..."
            sudo yum install -y postgresql postgresql-server postgresql-devel
            
            # Initialize PostgreSQL if not already done
            if [ ! -f /var/lib/pgsql/data/postgresql.conf ]; then
              echo "Initializing PostgreSQL..."
              sudo postgresql-setup initdb
              
              # Configure PostgreSQL to accept local connections
              sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = 'localhost'/" /var/lib/pgsql/data/postgresql.conf
              echo "local all all trust" | sudo tee -a /var/lib/pgsql/data/pg_hba.conf
              echo "host all all 127.0.0.1/32 trust" | sudo tee -a /var/lib/pgsql/data/pg_hba.conf
            fi
            
            # Start PostgreSQL
            sudo systemctl enable postgresql
            sudo systemctl start postgresql
            
            # Create database and user
            sudo -u postgres psql -c "DROP DATABASE IF EXISTS academic_saas_dev;" || true
            sudo -u postgres psql -c "DROP USER IF EXISTS admin;" || true
            sudo -u postgres psql -c "CREATE DATABASE academic_saas_dev;"
            sudo -u postgres psql -c "CREATE USER admin WITH PASSWORD 'admin123';"
            sudo -u postgres psql -c "ALTER USER admin CREATEDB;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE academic_saas_dev TO admin;"
            
            echo "Using Python 3.8..."
            python3.8 --version
            
            # Install Python dependencies (skip if already installed recently)
            echo "📦 Instalando dependencias..."
            
            # Install PostgreSQL development headers for psycopg2 and system tools
            sudo yum install -y postgresql-devel gcc python3-devel lsof
            
            python3.8 -m pip install -r requirements.txt --quiet
            
            # Verify critical dependencies
            echo "🔍 Verifying critical dependencies..."
            python3.8 -c "
            import sys
            missing = []
            try:
                import django
                print(f'✅ Django {django.get_version()}')
            except ImportError:
                missing.append('django')
                
            try:
                import psycopg2
                print('✅ psycopg2')
            except ImportError:
                missing.append('psycopg2')
                
            try:
                import gunicorn
                print('✅ gunicorn')
            except ImportError:
                missing.append('gunicorn')
                
            if missing:
                print(f'❌ Missing: {missing}')
                sys.exit(1)
            "
            
            echo "🛑 Limpieza simple de procesos existentes..."
            
            # Simple cleanup - just remove PID file and kill by port
            rm -f /tmp/django.pid || true
            
            # Simple port cleanup - kill whatever is on 8000
            echo "🔍 Limpiando puerto 8000..."
            fuser -k 8000/tcp 2>/dev/null || true
            sleep 3
            
            echo "✅ Limpieza completada"
            
            echo "⚙️ Configurando variables de entorno..."
            
            # Generate a fallback SECRET_KEY if the secret is empty
            SECRET_KEY_VALUE="${{ secrets.SECRET_KEY_DEV }}"
            if [ -z "$SECRET_KEY_VALUE" ]; then
              echo "⚠️ SECRET_KEY_DEV not configured, generating temporary key"
              SECRET_KEY_VALUE="dev-temp-key-$(date +%s)-$(openssl rand -hex 32)"
            fi
            
            cat > .env << EOF
            ENVIRONMENT=dev
            DATABASE_URL=postgresql://admin:admin123@localhost:5432/academic_saas_dev
            SECRET_KEY=$SECRET_KEY_VALUE
            DEBUG=True
            ALLOWED_HOSTS=localhost,127.0.0.1,${{ secrets.EC2_HOST_DEV }}
            CORS_ALLOWED_ORIGINS=http://localhost:3000,http://${{ secrets.EC2_HOST_DEV }}:3000,http://${{ secrets.EC2_HOST_DEV }}
            EOF
            
            echo "✅ Variables de entorno configuradas"
            
            # Debug: Check if .env file was created correctly
            echo "🔍 Verificando archivo .env:"
            cat .env
            echo "---"
            
            # Export variables to environment as well
            export ENVIRONMENT=dev
            export DATABASE_URL="postgresql://admin:admin123@localhost:5432/academic_saas_dev"
            export SECRET_KEY="$SECRET_KEY_VALUE"
            export DEBUG=True
            export ALLOWED_HOSTS="localhost,127.0.0.1,${{ secrets.EC2_HOST_DEV }}"
            export CORS_ALLOWED_ORIGINS="http://localhost:3000,http://${{ secrets.EC2_HOST_DEV }}:3000,http://${{ secrets.EC2_HOST_DEV }}"
            
            echo "🔍 Verificando variables de entorno:"
            echo "SECRET_KEY length: ${#SECRET_KEY}"
            echo "DATABASE_URL: $DATABASE_URL"
            
            echo "🔄 Ejecutando migraciones..."
            python3.8 manage.py migrate || { 
              echo "❌ Migration failed, checking database connection:"
              python3.8 -c "
              import os
              os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
              import django
              django.setup()
              from django.db import connection
              try:
                  cursor = connection.cursor()
                  cursor.execute('SELECT 1')
                  print('✅ Database connection successful')
              except Exception as e:
                  print(f'❌ Database connection failed: {e}')
              "
              exit 1; 
            }
            
            echo "👤 Creando superusuario Django..."
            python3.8 manage.py shell << 'EOF'
            from apps.users.models import User
            from apps.organizations.models import School
            
            if not User.objects.filter(username='admin').exists():
                # Crear escuela demo si no existe
                school, created = School.objects.get_or_create(name='Demo School')
                if created:
                    print("Escuela demo creada")
                
                # Crear superusuario
                User.objects.create_superuser('admin', 'admin@example.com', 'admin123', school=school)
                print("Superusuario creado: admin / admin123")
            else:
                print("Superusuario ya existe: admin / admin123")
            EOF
            
            echo "📁 Recolectando archivos estáticos..."
            python3.8 manage.py collectstatic --noinput || { echo "Collectstatic failed"; exit 1; }
            
            echo "🚀 Iniciando servidor Django..."
            # First test if Django can start at all
            echo "Testing Django startup..."
            
            echo "🔍 Checking Python environment..."
            python3.8 --version
            python3.8 -c "import django; print(f'Django version: {django.get_version()}')"
            
            echo "🔍 Testing database adapter..."
            python3.8 -c "
            try:
                import psycopg2
                print('✅ psycopg2 available')
            except ImportError:
                print('❌ psycopg2 not available, trying psycopg2-binary')
                try:
                    import psycopg2
                    print('✅ psycopg2-binary available')
                except ImportError:
                    print('❌ No PostgreSQL adapter available')
            "
            
            echo "🔍 Testing WSGI module..."
            python3.8 -c "
            import os
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
            try:
                from core.wsgi import application
                print('✅ WSGI module loads successfully')
            except Exception as e:
                print(f'❌ WSGI module failed: {e}')
                exit(1)
            "
            
            python3.8 manage.py check || { 
              echo "❌ Django check failed"
              python3.8 manage.py check --deploy || true
              exit 1
            }
            
            # Simple port verification
            echo "🔍 Verificación final del puerto 8000..."
            sleep 2
            
            echo "🚀 Iniciando gunicorn en puerto 8000..."
            nohup python3.8 -m gunicorn --bind 127.0.0.1:8000 --workers 2 --pid /tmp/django.pid --log-level debug core.wsgi:application > /tmp/django.log 2>&1 &
            
            echo "⏳ Esperando que Django esté listo..."
            sleep 15
            
            # Verify Django process started
            if [ -f /tmp/django.pid ]; then
              echo "✅ Django PID file created: $(cat /tmp/django.pid)"
              if ps -p $(cat /tmp/django.pid) > /dev/null 2>&1; then
                echo "✅ Django process is running"
              else
                echo "❌ Django process not found, checking logs:"
                tail -n 30 /tmp/django.log || echo "No logs available"
                echo "❌ Django process died, this indicates a startup error"
              fi
            else
              echo "❌ Django PID file not created"
              echo "Checking if gunicorn started at all:"
              tail -n 30 /tmp/django.log || echo "No logs available"
            fi
            
            # Additional Django debugging
            echo "🔍 Testing Django manually..."
            timeout 10 python3.8 manage.py runserver 127.0.0.1:8001 --noreload &
            sleep 3
            if curl -f http://localhost:8001/admin/login/ > /dev/null 2>&1; then
              echo "✅ Django can start manually - issue is with gunicorn"
              kill %1 2>/dev/null || true
            else
              echo "❌ Django cannot start even manually - configuration issue"
              kill %1 2>/dev/null || true
            fi
            
            echo "🌐 Configurando Nginx..."
            # Install nginx if not present (Amazon Linux 2 specific)
            if ! command -v nginx &> /dev/null; then
              echo "Installing nginx via amazon-linux-extras..."
              sudo amazon-linux-extras install -y nginx1
            fi
            
            # Stop nginx if running
            sudo systemctl stop nginx || true
            
            # Create nginx directories if they don't exist
            sudo mkdir -p /etc/nginx
            sudo mkdir -p /var/log/nginx
            
            # Remove any conflicting configurations
            sudo rm -f /etc/nginx/conf.d/academic-saas-frontend.conf || true
            sudo rm -f /etc/nginx/conf.d/default.conf || true
            
            # Copy nginx configuration
            sudo cp nginx.conf /etc/nginx/nginx.conf
            
            # Test nginx configuration
            sudo nginx -t || { echo "Nginx config test failed"; cat /var/log/nginx/error.log || true; exit 1; }
            
            # Only start nginx if Django is running
            if ! curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
              echo "❌ Django not responding, not starting nginx"
              exit 1
            fi
            
            # Start nginx
            sudo systemctl enable nginx
            sudo systemctl start nginx
            
            echo "⏳ Esperando que Nginx esté listo..."
            sleep 5
            
            # Check if process started
            if [ -f /tmp/django.pid ]; then
              echo "✅ Django PID file created: $(cat /tmp/django.pid)"
            else
              echo "❌ Django PID file not found"
            fi
            
            echo "🔍 Verificando salud del servicio..."
            # Wait a bit more and check Django directly first
            sleep 5
            
            # Check Django directly on port 8000
            for i in {1..3}; do
              if curl -f http://localhost:8000/admin/login/ > /dev/null 2>&1; then
                echo "✅ Django está respondiendo directamente"
                break
              else
                echo "Intento $i/3: Django no responde directamente, esperando..."
                sleep 5
              fi
            done
            
            # Check if service is responding through nginx
            for i in {1..5}; do
              if curl -f http://localhost/admin/login/ > /dev/null 2>&1; then
                echo "✅ Backend con Nginx desplegado exitosamente!"
                echo "🌐 URL: http://${{ secrets.EC2_HOST_DEV }}"
                echo "🔧 Admin: http://${{ secrets.EC2_HOST_DEV }}/admin"
                echo "📚 API Docs: http://${{ secrets.EC2_HOST_DEV }}/api/docs/"
                exit 0
              else
                echo "Intento $i/5: Esperando respuesta del servidor..."
                echo "Verificando logs de Django:"
                tail -n 10 /tmp/django.log || echo "No hay logs disponibles"
                echo "Verificando procesos:"
                ps aux | grep gunicorn || echo "No hay procesos gunicorn"
                sleep 5
              fi
            done
            
            echo "❌ Error: El backend no responde después de varios intentos"
            echo "Logs del proceso:"
            tail -n 50 /tmp/django.log || echo "No hay logs disponibles en /tmp/django.log"
            ps aux | grep gunicorn || echo "No hay procesos gunicorn"
            exit 1

      - name: Verify deployment
        run: |
          echo "🔍 Verificando despliegue del backend con Nginx..."
          sleep 15
          
          # Try multiple times with more detailed output
          for i in {1..3}; do
            echo "Intento de verificación $i/3..."
            if curl -f -v http://${{ secrets.EC2_HOST_DEV }}/admin/login/ 2>&1; then
              echo "✅ Verificación del backend con Nginx completada exitosamente!"
              exit 0
            else
              echo "❌ Intento $i falló, esperando antes del siguiente intento..."
              sleep 10
            fi
          done
          
          echo "❌ Verificación falló después de 3 intentos"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Backend deployment successful!"
            echo "✅ Application is live and healthy"
            echo "🌐 API URL: http://${{ secrets.EC2_HOST_DEV }}:8000"
            echo "🔧 Admin URL: http://${{ secrets.EC2_HOST_DEV }}:8000/admin"
          else
            echo "❌ Backend deployment failed!"
            echo "🔍 Check the logs above for more details"
          fi 